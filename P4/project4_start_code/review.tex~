\documentclass{article}
\usepackage{times}
\usepackage[a4paper, top=2.5cm, bottom=2.5cm, left=2.5cm, right=2.5cm]{geometry}
\title{Syncronization primitives-IPC}
\date{November 19, 2017}
\begin{document}
\maketitle
\section*{All the operation should only be performed in kernel state}
\section{spawn, kill and wait}
\begin{enumerate}
\item spawn:
  \begin{enumerate}
  \item enter\_critical, process spawning should not be interrupted.
  \item find an unused slot in the pcb table, take the index plus one as pid
  \item find target process information in files table in files.c
  \item initialize pcb of this process
  \item in files.c, we may find information for entry point, task type. store them in a task\_info structure and pass it to initialize\_pcb
  \item leave\_critical. Scheduling is not necessary
  \end{enumerate}
\item do\_wait:\\
  We do not need to concern about what if a process waits on several processes, which is impossible. Once a process decides to wait on a process, it is blocked.
  \begin{enumerate}
  \item enter\_critical
  \item  mark target process's status as blocked(proper?).\\
    we may need to add a wait\_queue field to pcb structure. Each process should maintain a wait queue. Processes in this queue are the ones waiting for this process to terminate. Once this process is killed or terminates, release all the process from this queue. So function exit should be changed.
  \item put this process to a wait queue
  \end{enumerate}
  \item do\_kill:
  \begin{enumerate}
  \item enter\_critical
  \item mark target process's status as EXITED so that the slot of this process in pcb can be used by other processes.
  \item release its stack:(seems there is no efficient way to restore stack space)
  \item release all the locks it holds.(how to find all the lock a process has held)
  \item release all the processes in its wait queue
  \item remove this process from any queue it is in.
  \item leave\_critical
  \end{enumerate}
\end{enumerate}
\section{Syncronization primitives}
all the operation except init should not interrupted.
\begin{enumerate}
\item Condition variables
  \begin{description}
  \item[structure] 
    \begin{enumerate}
    \item only a blocked queue is needed. Maybe some debug information could be added.
    \end{enumerate}
  \item[operation]
    all the operation should not be interrupted
    \begin{enumerate}
    \item init: initialize the wait queue in the condition vairable
    \item wait: wait for a condition variable, relaese the lock the task holds. When a task is finalliy unblock, reacquire the lock held before.
    \item signal: unblock only one process from condition variable's wait queue
    \item broadcast: unblock all the processes from condition variable's wait queue
    \end{enumerate}
  \end{description}
\item semaphore
  \begin{description}
  \item [structure]
    \begin{enumerate}
    \item an interger as semaphore counter
    \item a blocked queue is needed as well
    \end{enumerate}
  \item[operation]
    \begin{enumerate}
    \item init: initialize a semaphore with given value, which should be greater or equal to zero and initialize its blocked queue
    \item up: increase semaphore value by one, if the value before increment is zero, unblock a task from blocked queue.
    \item down: decrease semaphore value by ones if the value before decrement is not already zero, or block current process.
    \end{enumerate}
  \end{description}
\item barrier
  \begin{description}
  \item[structure:]
    \begin{enumerate}
      \item an integer \em target \em indicating number of total tasks to wait
      \item an integer \em blocked \em counting tasks already blocked
        \item a blocked queue is need as well
    \end{enumerate}
  \end{description}
    \begin{description}
  \item[operation:]
    \begin{enumerate}
      \item init: initialize \em target \em with an integer, which should be positive
      \item wait: if \em blocked \em equals to \em target-1\em, don not block current task,  unblock all the tasks in blocked queue and set \em blocked \em to 0, or block current task.
    \end{enumerate}
    \end{description}
  \item consequences of enabling timer interrupt
    \begin{description}
    \item[CV]:
    \item[Semaphore]: 
      \item[Barrier]: unblock one task andi decrease counter at the same time
    \end{description}
\end{enumerate}
\section{mailbox}
\begin{description}
\item[structure:]
  \begin{enumerate}
  \item mailbox\_name: the name of this mail box
  \item number\_of\_users: record the number of tasks using this mailbox. If it is zero, restore this mail box
  \item used(or just used number\_of\_users): whether this mail box is used or not.
  \item full
  \item empty
  \item a buffer
  \item write\_index
  \item read\_index
  \end{enumerate}
\item[operation]:
  \begin{enumerate}
  \item open: select one empty mailbox from mailbox array to process. Increase number\_of\_users. If no box is available, return -1
  \item close: restore a mailbox, mark it as unused.
  \item send: write data, process is only blocked when MAILBOX is full. Each mailbox contains MAX\_MBOX\_LENGTH massages, so one porcess use one of them in sequence. It is like a two dimensional pipe.
  \item read: read data, process is only blocked when MAILBOX is EMPTY. Each mailbox contains MAX\_MBOX\_LENGTH massages, so one porcess read from one of them in sequence. one write\_index equals to read\_index indicates empty.
  \end{enumerate}
\end{description}
\end{document}
  
 
