/* Author(s): <Your name here>
 * COS 318, Fall 2013: Project 3 Pre-emptive Scheduler
 * Implementation of the process scheduler for the kernel.
 */

#include "common.h"
#include "interrupt.h"
#include "queue.h"
#include "printf.h"
#include "scheduler.h"
#include "util.h"
#include "syslib.h"


#define  FIFO 1

pcb_t *current_running;
node_t ready_queue;
node_t sleep_wait_queue;
// more variables...
volatile uint64_t time_elapsed;

/* TODO:wake up sleeping processes whose deadlines have passed */
void check_sleeping(){
    uint64_t current_time = get_timer();
    node_t *pp;
    pcb_t *temp;

    for(pp = peek(&sleep_wait_queue); pp != &sleep_wait_queue && pp != NULL;){
	temp = (pcb_t*)pp;
	if(current_time * 1000 >= temp->deadline){
	    temp->status = READY;
	    pp = pp->next;
	    temp->node.prev->next = temp->node.next;
	    temp->node.next->prev = temp->node.prev;
	    enqueue(&ready_queue, (node_t *)temp);
	}
	else{
	    pp = pp->next;
	}
    }

}

/* Round-robin scheduling: Save current_running before preempting */
void put_current_running(){
    current_running->status = READY;
    enqueue(&ready_queue, (node_t*)current_running);
}

/* Change current_running to the next task */
void scheduler(){
     ASSERT(disable_count);
     check_sleeping(); // wake up sleeping processes
     while (is_empty(&ready_queue)){
          leave_critical();
          enter_critical();
          check_sleeping();
     }

     if(FIFO){
	 current_running = (pcb_t *)dequeue(&ready_queue);
     }
     else{
	 node_t* pp;
	 pcb_t*  temp;
	 int i = 1;
	 temp = (pcb_t*)peek(&ready_queue);

	 
	 for(pp=peek(&ready_queue); pp!=&ready_queue && pp!=NULL; pp=pp->next){
	     if(temp->priority < ((pcb_t*)pp)->priority){
		 temp = (pcb_t*)pp;
	     }
	 }
	 temp->node.prev->next = temp->node.next;
	 temp->node.next->prev = temp->node.prev;
	 temp->node.next = NULL;
	 temp->node.prev = NULL;
	 current_running = temp;
	 current_running->priority -= (current_running->priority > 0) ? 10 : -100;
     }

     ASSERT(NULL != current_running);
     ++current_running->entry_count;
}


int lte_deadline(node_t *a, node_t *b) {
     pcb_t *x = (pcb_t *)a;
     pcb_t *y = (pcb_t *)b;

     if (x->deadline <= y->deadline) {
          return 1;
     } else {
          return 0;
     }
}

void do_sleep(int milliseconds){
     ASSERT(!disable_count);

     enter_critical();
     // TODO
     current_running->deadline = time_elapsed*1000 + milliseconds;
//     current_running->deadline = 12345;
     print_int(10, 1, current_running->deadline);
     current_running->status = SLEEPING;
     enqueue(&sleep_wait_queue, (node_t *)current_running);
     scheduler_entry();
//     leave_critical();
}
void do_yield(){
    enter_critical();
//    printf(10, 1, "yield");
    put_current_running();
    scheduler_entry();
}

void do_exit(){
     enter_critical();
     current_running->status = EXITED;
     scheduler_entry();
     /* No need for leave_critical() since scheduler_entry() never returns */
}

void block(node_t * wait_queue){
     ASSERT(disable_count);
     current_running->status = BLOCKED;
     enqueue(wait_queue, (node_t *) current_running);
     scheduler_entry();
     enter_critical();
}

void unblock(pcb_t * task){
     ASSERT(disable_count);
     task->status = READY;
     enqueue(&ready_queue, (node_t *) task);
}

pid_t do_getpid(){
     pid_t pid;
     enter_critical();
     pid = current_running->pid;
     leave_critical();
     return pid;
}

uint64_t do_gettimeofday(void){
     return time_elapsed;
}

priority_t do_getpriority(){
    return current_running->priority;
}


void do_setpriority(priority_t priority){
    current_running->priority = priority;
}

uint64_t get_timer(void) {
     return do_gettimeofday();
}

