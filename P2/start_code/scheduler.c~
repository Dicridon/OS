/* scheduler.c */

#include "common.h"
#include "kernel.h"
#include "scheduler.h"
#include "util.h"
#include "queue.h"

int scheduler_count;
// process or thread runs time
uint64_t cpu_time;

void printstr(char *s);
void printnum(unsigned long long n);
void scheduler(void)
{
    ++scheduler_count;
    // pop new pcb off ready queue
    /* TODO */
    /* need student add */
    if(!ready_queue->isEmpty){
	current_running = queue_pop(ready_queue);
	current_running->pstate = PROCESS_RUNNING;
    }
    else
	current_running = NULL;
}

void do_yield(void)
{
    save_pcb();
    /* push the currently running process on ready queue */
    /* TODO */
    /* need student add */
    current_running->pstate = PROCESS_READY;
    queue_push(ready_queue, current_running);
    
    // call scheduler_entry to start next task
    scheduler_entry();

    // should never reach here
    ASSERT(0);
}

void do_exit(void)
{
    /* TODO */
    current_running->pstate = PROCESS_EXITED;
    /* need student add */
    scheduler_entry();
}

void block(void)
{
    save_pcb();
    /* need student add */
    /* TODO */
    current_running->pstate = PROCESS_BLOCKED;
    queue_push(blocked_queue, current_running);
    // should never reach here
    scheduler_entry();
    printstr("bbASSERTbb");
    ASSERT(0);
}

int unblock(void)
{
    /* TODO */
    /* need student add */
    if(blocked_queue->isEmpty)
	return FALSE;
    else{
	while(!blocked_queue->isEmpty){
	    pcb_t* blk = queue_pop(blocked_queue);
	    blk->pstate = PROCESS_READY;
	    queue_push(ready_queue, blk);
	}
    }
    return TRUE;

}

bool_t blocked_tasks(void)
{
    return !blocked_queue->isEmpty;
}
